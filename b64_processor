#!/usr/bin/python3

import base64
import sys

# This program helps to decode and encode JWT tokens

START_MESSAGE = "######### JWT (-d) DECODER AND (-e) ENCODER ##############"
HOW_TO_USE = """\nHOW TO USE :- \n./JWT_PROCESSOR -e YOUR_TEXT_TO ENCODE \n./JWT_PROCESSOR -d YOUR_TEXT_TO DECODE
\nENCODING JWT ./b64_processor -e '{"alg":"None","typ":"JWT"}'.'{"sub":"1234567890","name":"lol","iat":1516239022}' """

COMMANDS = ['-e', '-d']


def START_USAGE():
    if sys.argv[1] not in COMMANDS:
        print(START_MESSAGE)
        print(HOW_TO_USE)


def STRING_PROCESSOR():
    """
    This function is used to process strings.

    Returns:
       returns a list  """
    OUTPUT = []
    PAYLOAD = sys.argv[2:]
    for i in PAYLOAD:
        OUTPUT = i.split(".")
    return OUTPUT


    
    

PROCESS_STRING = STRING_PROCESSOR()
# print(PROCESS_STRING)


def PROCESSOR():
    OUTPUT = ''
    if sys.argv[1] == '-d':
       
        for i in PROCESS_STRING[:-1]:
            base64_message = f"{i}=="
            # print(base64_message)
            base64_bytes = base64_message.encode('ascii')
            message_bytes = base64.b64decode(base64_bytes)
            message = message_bytes.decode('ascii')
            OUTPUT +=message
        

    elif sys.argv[1] == '-e':
        for i in PROCESS_STRING:
            message = f"{i}"
            message_bytes = message.encode('ascii')
            base64_bytes = base64.b64encode(message_bytes)
            base64_message = base64_bytes.decode('ascii')
            OUTPUT += base64_message.replace("=", ".")

    else:
        START_USAGE()
    print(OUTPUT)

PROCESSOR()


### BY EXCeptional